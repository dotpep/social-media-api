name: Build and Deploy Code

on: [push, pull_request]

jobs:
  # Continuous Integration
  # Building and Testing project before pushing it to production
  build-ci:
    # Environment variables
    environment: 
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    # Postgres Database instance
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-20.04
    steps:
      # Check-out repo and Set-up python
      - name: Checkout Pulling Git Repo
        uses: actions/checkout@v4
      - name: Install Python version 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      #- name: Update pip
      #  run: python -m pip install --upgrade pip
      #- name: Install dependencies
      #  run: pip install -r requirements.txt
      #- name: Run tests with PyTest
      #  run: |
      #    pip install pytest
      #    pytest -v

      # Install & Configure Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.7.1'
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install project dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Run test suite
      - name: Run tests with Pytest
        run: poetry run pytest -v tests/

      #- name: Login to Docker Hub
      #  uses: docker/login-action@v3
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v3
      #- name: Build and push
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    push: true
      #    tags: ${{ secrets.DOCKERHUB_USERNAME }}/social-media-fastapi:latest
      #    cache-from: type=local,src=/tmp/.buildx-cache
      #    cache-to: type=local,dest=/tmp/.buildx-cache
      #- name: Image digest
      #  run: echo ${{ steps.docker_build.outputs.digest }}

  # Continuous Delivery
  # Deployment to production server
  deploy-cd:
    environment: 
      name: production
    runs-on: ubuntu-20.04
    needs: build-ci
    steps:
      - name: Checkout Pulling Git Repo
        uses: actions/checkout@v4

      - name: Deploy to VPS Ubuntu VM server and Executing ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            bash -l -c '
              cd api/src
              git pull origin main
              poetry install --no-interaction --no-root
              poetry run alembic upgrade head
              echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart api
            '

  # Pushing DockerHub image for production
  #docker:
  #  runs-on: ubuntu-20.04
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #    - name: Set up Docker Buildx
  #      uses: docker/setup-buildx-action@v3
  #    - name: Cache Docker layers
  #      uses: actions/cache@v3
  #      with:
  #        path: /tmp/.buildx-cache
  #        key: ${{ runner.os }}-buildx-${{ github.sha }}
  #        restore-keys: |
  #          ${{ runner.os }}-buildx-            
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v3
  #      with:
  #        username: ${{ secrets.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_TOKEN }}
  #    - name: Build and push
  #      uses: docker/build-push-action@v5
  #      with:
  #        context: .
  #        push: true
  #        tags: ${{ secrets.DOCKERHUB_USERNAME }}/social-media-fastapi:latest
  #        cache-from: type=local,src=/tmp/.buildx-cache
  #        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
  #    - # Temp fix
  #      # https://github.com/docker/build-push-action/issues/252
  #      # https://github.com/moby/buildkit/issues/1896
  #      name: Move cache
  #      run: |
  #        rm -rf /tmp/.buildx-cache
  #        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
